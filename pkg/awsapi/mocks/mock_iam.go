// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/keikoproj/iam-manager/pkg/awsapi (interfaces: IAMIface)

// Package mock_awsapi is a generated GoMock package.
package mock_awsapi

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	awsapi "github.com/keikoproj/iam-manager/pkg/awsapi"
	reflect "reflect"
)

// MockIAMIface is a mock of IAMIface interface
type MockIAMIface struct {
	ctrl     *gomock.Controller
	recorder *MockIAMIfaceMockRecorder
}

// MockIAMIfaceMockRecorder is the mock recorder for MockIAMIface
type MockIAMIfaceMockRecorder struct {
	mock *MockIAMIface
}

// NewMockIAMIface creates a new mock instance
func NewMockIAMIface(ctrl *gomock.Controller) *MockIAMIface {
	mock := &MockIAMIface{ctrl: ctrl}
	mock.recorder = &MockIAMIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAMIface) EXPECT() *MockIAMIfaceMockRecorder {
	return m.recorder
}

// AddPermissionBoundary mocks base method
func (m *MockIAMIface) AddPermissionBoundary(arg0 context.Context, arg1 awsapi.IAMRoleRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPermissionBoundary", arg0, arg1)
}

// AddPermissionBoundary indicates an expected call of AddPermissionBoundary
func (mr *MockIAMIfaceMockRecorder) AddPermissionBoundary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermissionBoundary", reflect.TypeOf((*MockIAMIface)(nil).AddPermissionBoundary), arg0, arg1)
}

// AttachInlineRolePolicy mocks base method
func (m *MockIAMIface) AttachInlineRolePolicy(arg0 context.Context, arg1 awsapi.IAMRoleRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AttachInlineRolePolicy", arg0, arg1)
}

// AttachInlineRolePolicy indicates an expected call of AttachInlineRolePolicy
func (mr *MockIAMIfaceMockRecorder) AttachInlineRolePolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachInlineRolePolicy", reflect.TypeOf((*MockIAMIface)(nil).AttachInlineRolePolicy), arg0, arg1)
}

// CreateRole mocks base method
func (m *MockIAMIface) CreateRole(arg0 context.Context, arg1 awsapi.IAMRoleRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateRole", arg0, arg1)
}

// CreateRole indicates an expected call of CreateRole
func (mr *MockIAMIfaceMockRecorder) CreateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockIAMIface)(nil).CreateRole), arg0, arg1)
}

// DeleteRole mocks base method
func (m *MockIAMIface) DeleteRole(arg0 context.Context, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteRole", arg0, arg1)
}

// DeleteRole indicates an expected call of DeleteRole
func (mr *MockIAMIfaceMockRecorder) DeleteRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockIAMIface)(nil).DeleteRole), arg0, arg1)
}

// GetRolePolicy mocks base method
func (m *MockIAMIface) GetRolePolicy(arg0 context.Context, arg1 awsapi.IAMRoleRequest) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolePolicy", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetRolePolicy indicates an expected call of GetRolePolicy
func (mr *MockIAMIfaceMockRecorder) GetRolePolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolePolicy", reflect.TypeOf((*MockIAMIface)(nil).GetRolePolicy), arg0, arg1)
}

// UpdateRole mocks base method
func (m *MockIAMIface) UpdateRole(arg0 context.Context, arg1 awsapi.IAMRoleRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateRole", arg0, arg1)
}

// UpdateRole indicates an expected call of UpdateRole
func (mr *MockIAMIfaceMockRecorder) UpdateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockIAMIface)(nil).UpdateRole), arg0, arg1)
}
